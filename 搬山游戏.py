#!/usr/bin/end python3
#-*- coding:utf-8 -*-
'''
问题描述

设有n座山，计算机与人作为比赛的双方，轮流搬山。规定每次搬山数不能超过k座，谁搬最后一座淮输。游戏开始时，计算机请人输入山的总数n和
每次允许搬山的最大数k，然后请人开始，等人输入了需要搬走的山的数目后，计算机马上打印出它搬多少座山，并提示尚余多少座山。双方轮流搬
山直到最后一座山搬完为止。计算机会显示谁是赢家，并问人是否要继续比赛。如果人不想玩了，计算机便会统计出共玩了几局，双方胜负如何。
问题分析

程序中先输入山的座数，要求每次搬山的最大数，从而找出最佳的搬山座数以获得游戏的胜利。

程序在若干次游戏结束后还记录了电脑跟人的胜负次数。程序中应用了条件语句、循环语句和逻辑判断语句来实现功能。

在有n座山的情况下，计算机为了将最后一座山留给人，而且又要控制每次搬山的数目不超过最大数k，应搬山的数目要满足关系：(n-1)%(k+1)。
算法设计

计算机参加游戏时应遵循下列原则：

(1) 当剩余山的数目-1≤可移动的最大数k时，计算机要移（剩余山数目-1）座，以便将最后一座山留给人。

(2) 对于任意正整数x，y，一定有：
0≤x%(y+1)≤y
在有n座山的情况下，计算机为了将最后一座山留给人，而且又要控制每次搬山的数目不超过最大数k，则它应搬山的数目要满足下列关系：
(n-1)%(k+1)
如果算出结果为0，即整除无余数，则规定只搬一座山，以防止冒进后发生问题。
'''

while 1:
	print('begin')
	print('输入山数')
	n=input()
	if n == 'n':
		print('exit')
		break
	else:		
		n=int(n)
		while not(n > 0):			
			print('山数有误，重输')
			n=int(input())
		print('输入最大移动山数')
		k=int(input())
		while (k < 0 and k == 0) and k > n:
			print('最大移动山数有误，重输')
			k=int(input())
		while n > 0:
			if k < n:
				print('输入你想移动的山数,其值小于 %d' % k)
			else:
				print('输入你想移动的山数,其值小于 %d' % n)
			x=int(input())
			while(x > n or x > k):
				print('你想移动的山数有误，重输')
				x=int(input())
			n = n - x
			print('剩余的山数 %d' % n)
			